{"version":3,"file":"index.js","mappings":"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","sources":["webpack://BeautifyConsole/webpack/universalModuleDefinition","webpack://BeautifyConsole/./src/beautify-console/index.ts","webpack://BeautifyConsole/./src/beautify-console/model/index.ts","webpack://BeautifyConsole/./src/utils/index.ts","webpack://BeautifyConsole/webpack/bootstrap","webpack://BeautifyConsole/webpack/runtime/global","webpack://BeautifyConsole/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"BeautifyConsole\"] = factory();\n\telse\n\t\troot[\"BeautifyConsole\"] = factory();\n})(self, () => {\nreturn ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BeautifyConsole = void 0;\nconst model_1 = require(\"./model\");\n/**\n * 转换node使用的日志颜色\n * @param option 颜色类型配置\n * @param text 日志起始填充文本内容\n * @param type 日志类型\n * @returns string\n */\nconst baseColor = (option = {}, text, type) => {\n    let { color = model_1.ColorType.white, bgColor = model_1.ColorType.white } = option;\n    if (typeof color === 'string') {\n        const keys = Object.keys(model_1.ColorType);\n        for (let i = 0; i < keys.length; i++) {\n            const element = keys[i];\n            if (element === color) {\n                color = model_1.ColorType[element];\n                break;\n            }\n        }\n    }\n    if (typeof bgColor === 'string') {\n        const keys = Object.keys(model_1.ColorType);\n        for (let i = 0; i < keys.length; i++) {\n            const element = keys[i];\n            if (element === bgColor) {\n                bgColor = model_1.ColorType[element];\n                break;\n            }\n        }\n    }\n    const backgroundColor = (Number(bgColor) || 0) + 10;\n    const textColor = Number(color) || 0;\n    if (typeof process === \"object\" && process.title === \"node\") {\n        return `\\x1b[${backgroundColor};${textColor};1m ${type.toUpperCase()} \\x1b[0m\\x1b[100;97m ${text}\\x1b[0m`;\n    }\n    else {\n        return `\\x1b[${backgroundColor};${textColor};1m ${type.toUpperCase()} \\x1b[0m\\x1b[100;97m ${text}`;\n    }\n};\n/**\n * 日志左侧填充的文字\n */\nconst padText = {\n    info(text = \"beautify-console-log \", style = { bgColor: model_1.ColorType.blue, color: model_1.ColorType.white }) {\n        return [baseColor(style, text, model_1.LogType.info)];\n    },\n    error(text = \"beautify-console-log \", style = { bgColor: model_1.ColorType.red, color: model_1.ColorType.white }) {\n        return [baseColor(style, text, model_1.LogType.error)];\n    },\n    warn(text = \"beautify-console-log \", style = {\n        bgColor: model_1.ColorType.yellow,\n        color: model_1.ColorType.black,\n    }) {\n        return [baseColor(style, text, model_1.LogType.warn)];\n    },\n    log(text = \"beautify-console-log \", style = { bgColor: model_1.ColorType.green, color: model_1.ColorType.white }) {\n        return [baseColor(style, text, model_1.LogType.log)];\n    },\n};\n/**\n * BeautifyConsole 是console日志工具\n *\n * 目前只有常用的 info、log、error、warn类型\n *\n * 1.使用：\n * ```\n *\n * import BeautifyConsole from \"beautify-console-log\";\n * const log = BeautifyConsole.getInstance();\n * log.log(1, [2, 3], '4');\n * ```\n *\n * 2.设置打开console日志显示：Log.open()\n *\n * 3.设置关闭console日志显示：Log.close()\n *\n * 4.设置开始的填充文本console日志：Log.setPadStartText()\n *\n *\n * ```\n *  {\n *    info: (...args: any[]) => void;\n *    error: (...args: any[]) => void;\n *    warn: (...args: any[]) => void;\n *    log: (...args: any[]) => void;\n *    static getInstance(): BeautifyConsole;\n *    config(config: {\n *        type?: LogType[] | ('info' | 'log' | 'warn' | 'error')[];\n *        title?: string;\n *    }): void;\n *    reset(): BeautifyConsole;\n *    open(type?: LogType): BeautifyConsole;\n *    close(type?: LogType): BeautifyConsole;\n *    setPadStartText(config: PadStartText): BeautifyConsole;\n *  }\n *  ```\n *\n * 可参考 https://developer.mozilla.org/en-US/docs/Web/API/Console\n */\nclass BeautifyConsole {\n    constructor() {\n        this.infoPadStartText = padText[model_1.LogType.info]();\n        this.errorPadStartText = padText[model_1.LogType.error]();\n        this.warnPadStartText = padText[model_1.LogType.warn]();\n        this.logPadStartText = padText[model_1.LogType.log]();\n        /**\n         * Print info type information\n         */\n        this.info = console.info.bind(this, ...this.infoPadStartText);\n        /**\n         * Print error type information\n         */\n        this.error = console.error.bind(this, ...this.errorPadStartText);\n        /**\n         * Print warn type information\n         */\n        this.warn = console.warn.bind(this, ...this.warnPadStartText);\n        /**\n         * Print log type information\n         */\n        this.log = console.log.bind(this, ...this.logPadStartText);\n    }\n    /**\n     * Singleton mode\n     */ static getInstance() {\n        if (!this.instance) {\n            this.instance = new BeautifyConsole();\n        }\n        return this.instance;\n    }\n    /**\n     * 初始化配置项\n     * @param config 是否打印日志 type { BaseConfig: {type?: LogType[] | ('info' | 'log' | 'warn' | 'error')[]; title?: string} }\n     * 如果配置了type，就只显示配置的日志类型\n     */\n    config(config) {\n        const { type = [model_1.LogType.info, model_1.LogType.error, model_1.LogType.warn, model_1.LogType.log], title, } = config;\n        if (type.length > 0) {\n            this.setShowLog(false);\n            type.forEach((item) => this.setShowLog(true, item));\n        }\n        if (title) {\n            type.forEach((item) => this.setPadStartText({\n                logType: item,\n                title,\n            }));\n        }\n    }\n    /**\n     * 设置显示/隐藏console日志\n     * @param showLog 是否打印日志 type { boolean }\n     * @param type 需要设置的日志类型日志 type { LogType | 'info' | 'log' | 'warn' | 'error' }\n     */\n    setShowLog(showLog, type) {\n        const setShowLogFunction = {\n            info: () => {\n                this.info = showLog\n                    ? console.info.bind(this, ...this.infoPadStartText)\n                    : (...parasm) => undefined;\n            },\n            error: () => {\n                this.error = showLog\n                    ? console.error.bind(this, ...this.errorPadStartText)\n                    : (...parasm) => undefined;\n            },\n            warn: () => {\n                this.warn = showLog\n                    ? console.warn.bind(this, ...this.warnPadStartText)\n                    : (...parasm) => undefined;\n            },\n            log: () => {\n                this.log = showLog\n                    ? console.log.bind(this, ...this.logPadStartText)\n                    : (...parasm) => undefined;\n            },\n        };\n        // 如果传入了要修改的console日志类型，就只改对应的显示隐藏，否则就更改所有的\n        if (type) {\n            if (setShowLogFunction[type]) {\n                setShowLogFunction[type]();\n            }\n            else {\n                console.error(`type:${type} not supported`);\n            }\n        }\n        else {\n            if (showLog) {\n                this.info = console.info.bind(this, ...this.infoPadStartText);\n                this.error = console.error.bind(this, ...this.errorPadStartText);\n                this.warn = console.warn.bind(this, ...this.warnPadStartText);\n                this.log = console.log.bind(this, ...this.logPadStartText);\n            }\n            else {\n                this.info = (...parasm) => undefined;\n                this.error = (...parasm) => undefined;\n                this.warn = (...parasm) => undefined;\n                this.log = (...parasm) => undefined;\n            }\n        }\n    }\n    /**\n     * 重置console日志\n     *\n     * @returns BeautifyConsole\n     */\n    reset() {\n        this.setShowLog(true);\n        return this;\n    }\n    /**\n     * 打开console日志\n     *\n     * @param type 需要设置的日志类型日志 type { LogType | 'info' | 'log' | 'warn' | 'error' }\n     *\n     * @returns BeautifyConsole\n     */\n    open(type) {\n        this.setShowLog(true, type);\n        return this;\n    }\n    /**\n     * 关闭console日志\n     *\n     * @param type 需要设置的日志类型日志 type { LogType | 'info' | 'log' | 'warn' | 'error' }\n     *\n     * @returns BeautifyConsole\n     */\n    close(type) {\n        this.setShowLog(false, type);\n        return this;\n    }\n    /**\n     * 重置开始的填充文本console日志，默认如info类型的开始填充： `cbeautify-console-log info: -> `\n     * @param title type { string }\n     * @param logType type { logType | 'info' | 'log' | 'warn' | 'error' }\n     * @param style type { PadStartStyle }\n     * @returns BeautifyConsole\n     */\n    setPadStartText(config) {\n        try {\n            const setTextFunction = {\n                info: () => {\n                    this.info = console.info.bind(this, ...padText[model_1.LogType.info](config.title, config.style));\n                },\n                error: () => {\n                    this.error = console.error.bind(this, ...padText[model_1.LogType.error](config.title, config.style));\n                },\n                warn: () => {\n                    this.warn = console.warn.bind(this, ...padText[model_1.LogType.warn](config.title, config.style));\n                },\n                log: () => {\n                    this.log = console.log.bind(this, ...padText[model_1.LogType.log](config.title, config.style));\n                },\n            };\n            if (setTextFunction[config.logType]) {\n                setTextFunction[config.logType]();\n            }\n            else {\n                console.error(`type:${config.logType} not supported`);\n            }\n        }\n        catch (error) {\n            this.error(error);\n        }\n        return this;\n    }\n}\nexports.BeautifyConsole = BeautifyConsole;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LogType = exports.ColorType = void 0;\n/**\n * 背景编号：\n *\n *  ``` text\n *  ColorType.black: 100黑，\n *  ColorType.red: 101红，\n *  ColorType.green: 102绿，\n *  ColorType.yellow: 103黄，\n *  ColorType.blue: 104蓝，\n *  ColorType.purple: 105紫，\n *  ColorType.cyan: 106深绿，\n *  ColorType.white: 107白色\n *  ```\n * 字色编号：\n * ``` text\n *  ColorType.black: 90黑，\n *  ColorType.red: 91红，\n *  ColorType.green: 92绿，\n *  ColorType.yellow: 93黄，\n *  ColorType.blue: 94蓝，\n *  ColorType.purple: 95紫，\n *  ColorType.cyan: 96深绿，\n *  ColorType.white: 97白色\n * ```\n * 90黑，91红，92绿，93黄，94蓝，95紫，96深绿，97白色\n * 0 终端默认设置（黑底白字）\n * 1 高亮显示\n * 7 反显\n * 8 不可见\n */\nvar ColorType;\n(function (ColorType) {\n    ColorType[ColorType[\"black\"] = 90] = \"black\";\n    ColorType[ColorType[\"red\"] = 91] = \"red\";\n    ColorType[ColorType[\"green\"] = 92] = \"green\";\n    ColorType[ColorType[\"yellow\"] = 93] = \"yellow\";\n    ColorType[ColorType[\"blue\"] = 94] = \"blue\";\n    ColorType[ColorType[\"purple\"] = 95] = \"purple\";\n    ColorType[ColorType[\"cyan\"] = 96] = \"cyan\";\n    ColorType[ColorType[\"white\"] = 97] = \"white\";\n})(ColorType || (exports.ColorType = ColorType = {}));\n/**\n * 日志类型\n * ```\n * LogType.info = \"info\"\n * LogType.warn = \"warn\"\n * LogType.error = \"error\"\n * LogType.log = \"log\"\n * ```\n */\nvar LogType;\n(function (LogType) {\n    LogType[\"info\"] = \"info\";\n    LogType[\"warn\"] = \"warn\";\n    LogType[\"error\"] = \"error\";\n    LogType[\"log\"] = \"log\";\n})(LogType || (exports.LogType = LogType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.formatConsoleStr = void 0;\n/**\n * 格式化字符串，用于兼容console.log('string=%s number=%d', 'string', 1)的写法，把参数进行格式化\n * @param params any[]\n * @returns\n */\nconst formatConsoleStr = (...params) => {\n    let paramArray = params.slice(1);\n    const formatRegExp = /%[sdof]/g;\n    if (params.length > 1 && typeof params[0] === \"string\") {\n        let i = 0;\n        const newArray = params[0].split(/(%s|%d|%o|%f)/g);\n        const str = params[0].replace(formatRegExp, function (result) {\n            i++;\n            let index = -1;\n            switch (result) {\n                case \"%s\":\n                    paramArray = paramArray.slice(1);\n                    index = newArray.indexOf(\"%s\");\n                    if (index > -1) {\n                        newArray[index] = params[i] ? String(params[i]) : \"\";\n                    }\n                    return String(params[i]);\n                case \"%d\":\n                    paramArray = paramArray.slice(1);\n                    index = newArray.indexOf(\"%d\");\n                    if (index > -1) {\n                        newArray[index] = params[i] ? Number(params[i]) : \"\";\n                    }\n                    return Number(params[i]);\n                case \"%o\":\n                    index = newArray.indexOf(\"%o\");\n                    try {\n                        if (params[i] instanceof Error) {\n                            paramArray = paramArray.slice(1);\n                            if (index > -1) {\n                                newArray[index] = params[i]\n                                    ? JSON.stringify(params[i], [\n                                        \"message\",\n                                        \"stack\",\n                                        \"type\",\n                                        \"name\",\n                                    ])\n                                    : \"\";\n                            }\n                            return JSON.stringify(params[i], [\n                                \"message\",\n                                \"stack\",\n                                \"type\",\n                                \"name\",\n                            ]);\n                        }\n                        else {\n                            paramArray = paramArray.slice(1);\n                            if (index > -1) {\n                                if (typeof global !== \"undefined\" && global) {\n                                    // 当前代码在Node.js环境中运行\n                                    newArray[index] = params[i] ? JSON.stringify(params[i]) : \"\";\n                                }\n                                else {\n                                    // 当前代码不在Node.js环境中运行\n                                    newArray[index] = params[i] ? params[i] : \"\";\n                                }\n                            }\n                            return params[i];\n                        }\n                    }\n                    catch (e) {\n                        paramArray = paramArray.slice(1);\n                        index = newArray.indexOf(\"%o\");\n                        if (index > -1) {\n                            newArray[index] = params[i] ? \"[Circular]\" : \"\";\n                        }\n                        return \"[Circular]\";\n                    }\n                case \"%f\":\n                    paramArray = paramArray.slice(1);\n                    index = newArray.indexOf(\"%o\");\n                    if (index > -1) {\n                        newArray[index] = params[i] ? Number.parseFloat(params[i]) : \"\";\n                    }\n                    return Number.parseFloat(params[i]);\n                default:\n                    paramArray = paramArray.slice(1);\n                    newArray[index] = params[i] ? params[i] : \"\";\n                    return params[i];\n            }\n        });\n        paramArray.splice(0, 0, str);\n        if (newArray.length < params.length) {\n            for (let i = newArray.length; i < params.length; i++) {\n                newArray[i] = params[i];\n            }\n        }\n        return newArray;\n    }\n    else {\n        return paramArray;\n    }\n};\nexports.formatConsoleStr = formatConsoleStr;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.utils = void 0;\nconst beautify_console_1 = require(\"./beautify-console\");\nexports.utils = require(\"./utils\");\nexports.default = beautify_console_1.BeautifyConsole;\n"],"names":["root","factory","exports","module","define","amd","self","Object","defineProperty","value","BeautifyConsole","model_1","baseColor","option","text","type","color","ColorType","white","bgColor","keys","i","length","element","backgroundColor","Number","textColor","process","title","toUpperCase","padText","info","style","blue","LogType","error","red","warn","yellow","black","log","green","constructor","this","infoPadStartText","errorPadStartText","warnPadStartText","logPadStartText","console","bind","getInstance","instance","config","setShowLog","forEach","item","setPadStartText","logType","showLog","setShowLogFunction","parasm","reset","open","close","setTextFunction","formatConsoleStr","params","paramArray","slice","formatRegExp","newArray","split","str","replace","result","index","indexOf","String","Error","JSON","stringify","g","e","parseFloat","splice","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","globalThis","Function","window","utils","beautify_console_1"],"sourceRoot":""}