{"version":3,"file":"index.js","mappings":"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","sources":["webpack://BeautifyConsole/webpack/universalModuleDefinition","webpack://BeautifyConsole/./src/beautify-console/index.ts","webpack://BeautifyConsole/webpack/bootstrap","webpack://BeautifyConsole/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"BeautifyConsole\"] = factory();\n\telse\n\t\troot[\"BeautifyConsole\"] = factory();\n})(self, () => {\nreturn ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BeautifyConsole = void 0;\n/**\n * 背景编号：40黑，41红，42绿，43黄，44蓝，45紫，46深绿，47白色\n * 字色编号：30黑，31红，32绿，33黄，34蓝，35紫，36深绿，37白色\n * 0 终端默认设置（黑底白字）\n * 1 高亮显示\n * 7 反显\n * 8 不可见\n */\nconst COLOR_CODE = {\n    black: 90,\n    red: 91,\n    green: 92,\n    yellow: 93,\n    blue: 94,\n    purple: 95,\n    cyan: 96,\n    white: 97,\n    // black_bg: 40,\n    // red_bg: 41,\n    // green_bg: 42,\n    // yellow_bg: 43,\n    // blue_bg: 44,\n    // purple_bg: 45,\n    // cyan_bg: 46,\n    // white_bg: 47,\n};\n/**\n * 转换node使用的日志颜色\n * @param option 颜色类型配置\n * @param text 日志起始填充文本内容\n * @param type 日志类型\n * @returns string\n */\nconst baseColor = (option = {}, text, type) => {\n    const { color = 'white' } = option;\n    const colorCode = COLOR_CODE[color] || 0;\n    if (typeof process === 'object' && process.title === 'node') {\n        return `\\x1b[${colorCode + 10};97;1m ${type.toUpperCase()} \\x1b[0m\\x1b[100;97m ${text}\\x1b[0m`;\n    }\n    else {\n        return `\\x1b[${colorCode + 10};97;1m ${type.toUpperCase()} \\x1b[0m\\x1b[100;97m ${text}`;\n    }\n};\n/**\n * 日志左侧填充的文字\n */\nconst padText = {\n    info(text = \"beautify-console-log info: -> \") {\n        return [baseColor({\n                color: 'blue',\n            }, text, 'info')];\n    },\n    error(text = \"beautify-console-log error: -> \") {\n        return [baseColor({\n                color: 'red'\n            }, text, 'error')];\n    },\n    warn(text = \"beautify-console-log warn: -> \") {\n        return [baseColor({\n                color: 'yellow'\n            }, text, 'warn')];\n    },\n    log(text = \"beautify-console-log log: -> \") {\n        return [baseColor({\n                color: 'green'\n            }, text, 'log')];\n    }\n};\nconst infoKey = 'info';\nconst warnKey = 'warn';\nconst errorKey = 'error';\nconst logKey = 'log';\n/**\n * BeautifyConsole 是console日志工具\n *\n * 目前只有常用的 info、log、error、warn类型\n *\n * 1.使用：Log.getInstance().log(1, [2, 3], '4')\n *\n * 2.设置打开console日志显示：Log.openLog()\n *\n * 3.设置关闭console日志显示：Log.closeLog()\n *\n * 4.设置开始的填充文本console日志：Log.setPadStartText()\n *\n *\n * 可参考 https://developer.mozilla.org/en-US/docs/Web/API/Console\n */\nclass BeautifyConsole {\n    constructor() {\n        this.infoPadStartText = padText[infoKey]();\n        this.errorPadStartText = padText[errorKey]();\n        this.warnPadStartText = padText[warnKey]();\n        this.logPadStartText = padText[logKey]();\n        this.info = console.info.bind(this, ...this.infoPadStartText);\n        this.error = console.error.bind(this, ...this.errorPadStartText);\n        this.warn = console.warn.bind(this, ...this.warnPadStartText);\n        this.log = console.log.bind(this, ...this.logPadStartText);\n        /**\n         * 设置自定义填充美化\n         * @param type 日志类型 type {logType}\n         * @param style 自定义美化 type {PadStartStyle}\n         */\n        // public setPadStartStyle(type: logType, style: PadStartStyle) {\n        //     const setStyleFunction = {\n        //         info: () => {\n        //             this.infoPadStartText[1] = style.text\n        //             this.info = console.info.bind(this, ...this.infoPadStartText)\n        //         },\n        //         error: () => {\n        //             this.errorPadStartText[1] = style.text\n        //             this.error = console.error.bind(this, ...this.errorPadStartText)\n        //         },\n        //         warn: () => {\n        //             this.warnPadStartText[1] = style.text\n        //             this.warn = console.warn.bind(this, ...this.warnPadStartText)\n        //         },\n        //         log: () => {\n        //             this.logPadStartText[1] = style.text\n        //             this.log = console.log.bind(this, ...this.logPadStartText)\n        //         },\n        //     }\n        //     if (setStyleFunction[type]) {\n        //         setStyleFunction[type]()\n        //     } else {\n        //         console.error(`type:${type} not supported`)\n        //     }\n        //     return this\n        // }\n    }\n    static getInstance() {\n        if (!this.instance) {\n            this.instance = new BeautifyConsole();\n        }\n        return this.instance;\n    }\n    /**\n     * 设置显示/隐藏console日志\n     * @param showLog 是否打印日志 type { boolean }\n     * @param type 需要设置的日志类型日志 type { logType }\n     */\n    setShowLog(showLog, type) {\n        const setShowLogFunction = {\n            info: () => {\n                this.info = showLog ? console.info.bind(this, ...this.infoPadStartText) : (...parasm) => undefined;\n            },\n            error: () => {\n                this.error = showLog ? console.error.bind(this, ...this.errorPadStartText) : (...parasm) => undefined;\n            },\n            warn: () => {\n                this.warn = showLog ? console.warn.bind(this, ...this.warnPadStartText) : (...parasm) => undefined;\n            },\n            log: () => {\n                this.log = showLog ? console.log.bind(this, ...this.logPadStartText) : (...parasm) => undefined;\n            },\n        };\n        // 如果传入了要修改的console日志类型，就只改对应的显示隐藏，否则就更改所有的\n        if (type) {\n            if (setShowLogFunction[type]) {\n                setShowLogFunction[type]();\n            }\n            else {\n                console.error(`type:${type} not supported`);\n            }\n        }\n        else {\n            if (showLog) {\n                this.info = console.info.bind(this, ...this.infoPadStartText);\n                this.error = console.error.bind(this, ...this.errorPadStartText);\n                this.warn = console.warn.bind(this, ...this.warnPadStartText);\n                this.log = console.log.bind(this, ...this.logPadStartText);\n            }\n            else {\n                this.info = (...parasm) => undefined;\n                this.error = (...parasm) => undefined;\n                this.warn = (...parasm) => undefined;\n                this.log = (...parasm) => undefined;\n            }\n        }\n    }\n    /**\n     * 打开console日志\n     *\n     * @param type 需要设置的日志类型日志 type { logType }\n     *\n     * @returns BeautifyConsole\n     */\n    open(type) {\n        this.setShowLog(true, type);\n        return this;\n    }\n    /**\n     * 关闭console日志\n     *\n     * @param type 需要设置的日志类型日志 type { logType }\n     *\n     * @returns BeautifyConsole\n     */\n    close(type) {\n        this.setShowLog(false, type);\n        return this;\n    }\n    /**\n     * 重置开始的填充文本console日志，默认如info类型的开始填充： `cbeautify-console-log info: -> `\n     * @param type type { consoleType }\n     * @param text type { any }\n     * @returns BeautifyConsole\n     */\n    setPadStartText(type, text) {\n        const setTextFunction = {\n            info: () => {\n                this.info = console.info.bind(this, ...padText[infoKey](text));\n            },\n            error: () => {\n                this.error = console.error.bind(this, ...padText[errorKey](text));\n            },\n            warn: () => {\n                this.warn = console.warn.bind(this, ...padText[warnKey](text));\n            },\n            log: () => {\n                this.log = console.log.bind(this, ...padText[logKey](text));\n            },\n        };\n        if (setTextFunction[type]) {\n            setTextFunction[type]();\n        }\n        else {\n            console.error(`type:${type} not supported`);\n        }\n        return this;\n    }\n}\nexports.BeautifyConsole = BeautifyConsole;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst beautify_console_1 = require(\"./beautify-console\");\nexports.default = beautify_console_1.BeautifyConsole;\n"],"names":["root","factory","exports","module","define","amd","self","Object","defineProperty","value","BeautifyConsole","COLOR_CODE","black","red","green","yellow","blue","purple","cyan","white","baseColor","option","text","type","color","colorCode","process","title","toUpperCase","padText","info","error","warn","log","infoKey","warnKey","errorKey","constructor","this","infoPadStartText","errorPadStartText","warnPadStartText","logPadStartText","console","bind","getInstance","instance","setShowLog","showLog","setShowLogFunction","parasm","open","close","setPadStartText","setTextFunction","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","beautify_console_1"],"sourceRoot":""}