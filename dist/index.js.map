{"version":3,"file":"index.js","mappings":"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","sources":["webpack://BeautifyConsole/webpack/universalModuleDefinition","webpack://BeautifyConsole/./src/beautify-console/index.ts","webpack://BeautifyConsole/webpack/bootstrap","webpack://BeautifyConsole/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"BeautifyConsole\"] = factory();\n\telse\n\t\troot[\"BeautifyConsole\"] = factory();\n})(self, () => {\nreturn ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BeautifyConsole = void 0;\n/**\n * 背景编号：40黑，41红，42绿，43黄，44蓝，45紫，46深绿，47白色\n * 字色编号：30黑，31红，32绿，33黄，34蓝，35紫，36深绿，37白色\n * 0 终端默认设置（黑底白字）\n * 1 高亮显示\n * 7 反显\n * 8 不可见\n */\nconst COLOR_CODE = {\n    black: 30,\n    red: 31,\n    green: 32,\n    yellow: 33,\n    blue: 34,\n    purple: 35,\n    cyan: 36,\n    white: 37,\n    // black_bg: 40,\n    // red_bg: 41,\n    // green_bg: 42,\n    // yellow_bg: 43,\n    // blue_bg: 44,\n    // purple_bg: 45,\n    // cyan_bg: 46,\n    // white_bg: 47,\n};\n/**\n * 转换node使用的日志颜色\n */\nconst baseColor = (option = {}) => {\n    const { color = 'white', colorBg = '' } = option;\n    const colorBgCode = COLOR_CODE[colorBg] ? COLOR_CODE[colorBg] + 10 : 0;\n    const colorCode = COLOR_CODE[color] || 0;\n    return `${'\\x1b'}[${colorBgCode};${colorCode}m`;\n};\n/**\n * 日志左侧填充的文字\n */\nconst padText = {\n    info(text = \"beautify-console-log info: -> \") {\n        if (typeof process === 'object' && process.title === 'node') {\n            return [baseColor({\n                    color: 'blue'\n                }), text];\n        }\n        else {\n            return [`%c${text} `, 'color: #5D8EF0;'];\n        }\n    },\n    error(text = \"beautify-console-log error: -> \") {\n        if (typeof process === 'object' && process.title === 'node') {\n            return [baseColor({\n                    color: 'red'\n                }), 'beautify-console-log error: -> '];\n        }\n        else {\n            return [text];\n        }\n    },\n    warn(text = \"beautify-console-log warn: -> \") {\n        if (typeof process === 'object' && process.title === 'node') {\n            return [baseColor({\n                    color: 'yellow'\n                }), text];\n        }\n        else {\n            return [text];\n        }\n    },\n    log(text = \"beautify-console-log log: -> \") {\n        if (typeof process === 'object' && process.title === 'node') {\n            return [baseColor({\n                    color: 'green'\n                }), text];\n        }\n        else {\n            return [`%c${text} `, 'color: green;'];\n        }\n    }\n};\nconst infoKey = 'info';\nconst warnKey = 'warn';\nconst errorKey = 'error';\nconst logKey = 'log';\n/**\n * BeautifyConsole 是console日志工具\n *\n * 目前只有常用的 info、log、error、warn类型\n *\n * 1.使用：Log.getInstance().log(1, [2, 3], '4')\n *\n * 2.设置打开console日志显示：Log.openLog()\n *\n * 3.设置关闭console日志显示：Log.closeLog()\n *\n * 4.设置开始的填充文本console日志：Log.setPadStartText()\n *\n *\n * 可参考 https://developer.mozilla.org/en-US/docs/Web/API/Console\n */\nclass BeautifyConsole {\n    constructor() {\n        this.infoPadStartText = padText[infoKey]();\n        this.errorPadStartText = padText[errorKey]();\n        this.warnPadStartText = padText[warnKey]();\n        this.logPadStartText = padText[logKey]();\n        this.info = console.info.bind(this, ...this.infoPadStartText);\n        this.error = console.error.bind(this, ...this.errorPadStartText);\n        this.warn = console.warn.bind(this, ...this.warnPadStartText);\n        this.log = console.log.bind(this, ...this.logPadStartText);\n        /**\n         * 设置自定义填充美化\n         * @param type 日志类型 type {logType}\n         * @param style 自定义美化 type {PadStartStyle}\n         */\n        // public setPadStartStyle(type: logType, style: PadStartStyle) {\n        //     const setStyleFunction = {\n        //         info: () => {\n        //             this.infoPadStartText[1] = style.text\n        //             this.info = console.info.bind(this, ...this.infoPadStartText)\n        //         },\n        //         error: () => {\n        //             this.errorPadStartText[1] = style.text\n        //             this.error = console.error.bind(this, ...this.errorPadStartText)\n        //         },\n        //         warn: () => {\n        //             this.warnPadStartText[1] = style.text\n        //             this.warn = console.warn.bind(this, ...this.warnPadStartText)\n        //         },\n        //         log: () => {\n        //             this.logPadStartText[1] = style.text\n        //             this.log = console.log.bind(this, ...this.logPadStartText)\n        //         },\n        //     }\n        //     if (setStyleFunction[type]) {\n        //         setStyleFunction[type]()\n        //     } else {\n        //         console.error(`type:${type} not supported`)\n        //     }\n        //     return this\n        // }\n    }\n    static getInstance() {\n        if (!this.instance) {\n            this.instance = new BeautifyConsole();\n        }\n        return this.instance;\n    }\n    /**\n     * 设置显示/隐藏console日志\n     * @param showLog 是否打印日志 type { boolean }\n     * @param type 需要设置的日志类型日志 type { logType }\n     */\n    setShowLog(showLog, type) {\n        const setShowLogFunction = {\n            info: () => {\n                this.info = showLog ? console.info.bind(this, ...this.infoPadStartText) : (...parasm) => undefined;\n            },\n            error: () => {\n                this.error = showLog ? console.error.bind(this, ...this.errorPadStartText) : (...parasm) => undefined;\n            },\n            warn: () => {\n                this.warn = showLog ? console.warn.bind(this, ...this.warnPadStartText) : (...parasm) => undefined;\n            },\n            log: () => {\n                this.log = showLog ? console.log.bind(this, ...this.logPadStartText) : (...parasm) => undefined;\n            },\n        };\n        // 如果传入了要修改的console日志类型，就只改对应的显示隐藏，否则就更改所有的\n        if (type) {\n            if (setShowLogFunction[type]) {\n                setShowLogFunction[type]();\n            }\n            else {\n                console.error(`type:${type} not supported`);\n            }\n        }\n        else {\n            if (showLog) {\n                this.info = console.info.bind(this, ...this.infoPadStartText);\n                this.error = console.error.bind(this, ...this.errorPadStartText);\n                this.warn = console.warn.bind(this, ...this.warnPadStartText);\n                this.log = console.log.bind(this, ...this.logPadStartText);\n            }\n            else {\n                this.info = (...parasm) => undefined;\n                this.error = (...parasm) => undefined;\n                this.warn = (...parasm) => undefined;\n                this.log = (...parasm) => undefined;\n            }\n        }\n    }\n    /**\n     * 打开console日志\n     *\n     * @param type 需要设置的日志类型日志 type { logType }\n     *\n     * @returns BeautifyConsole\n     */\n    open(type) {\n        this.setShowLog(true, type);\n        return this;\n    }\n    /**\n     * 关闭console日志\n     *\n     * @param type 需要设置的日志类型日志 type { logType }\n     *\n     * @returns BeautifyConsole\n     */\n    close(type) {\n        this.setShowLog(false, type);\n        return this;\n    }\n    /**\n     * 重置开始的填充文本console日志，默认如info类型的开始填充： `cbeautify-console-log info: -> `\n     * @param type type { consoleType }\n     * @param text type { any }\n     * @returns BeautifyConsole\n     */\n    setPadStartText(type, text) {\n        const setTextFunction = {\n            info: () => {\n                this.info = console.info.bind(this, ...padText[infoKey](text));\n            },\n            error: () => {\n                this.error = console.error.bind(this, ...padText[errorKey](text));\n            },\n            warn: () => {\n                this.warn = console.warn.bind(this, ...padText[warnKey](text));\n            },\n            log: () => {\n                this.log = console.log.bind(this, ...padText[logKey](text));\n            },\n        };\n        if (setTextFunction[type]) {\n            setTextFunction[type]();\n        }\n        else {\n            console.error(`type:${type} not supported`);\n        }\n        return this;\n    }\n}\nexports.BeautifyConsole = BeautifyConsole;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst beautify_console_1 = require(\"./beautify-console\");\nexports.default = beautify_console_1.BeautifyConsole;\n"],"names":["root","factory","exports","module","define","amd","self","Object","defineProperty","value","BeautifyConsole","COLOR_CODE","black","red","green","yellow","blue","purple","cyan","white","baseColor","option","color","colorBg","padText","info","text","process","title","error","warn","log","infoKey","warnKey","errorKey","constructor","this","infoPadStartText","errorPadStartText","warnPadStartText","logPadStartText","console","bind","getInstance","instance","setShowLog","showLog","type","setShowLogFunction","parasm","open","close","setPadStartText","setTextFunction","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","beautify_console_1"],"sourceRoot":""}