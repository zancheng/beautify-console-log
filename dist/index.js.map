{"version":3,"file":"index.js","mappings":"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","sources":["webpack://BeautifyConsole/webpack/universalModuleDefinition","webpack://BeautifyConsole/./src/beautify-console/index.ts","webpack://BeautifyConsole/webpack/bootstrap","webpack://BeautifyConsole/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"BeautifyConsole\"] = factory();\n\telse\n\t\troot[\"BeautifyConsole\"] = factory();\n})(self, () => {\nreturn ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BeautifyConsole = void 0;\n/**\n * 背景编号：40黑，41红，42绿，43黄，44蓝，45紫，46深绿，47白色\n * 字色编号：30黑，31红，32绿，33黄，34蓝，35紫，36深绿，37白色\n * 0 终端默认设置（黑底白字）\n * 1 高亮显示\n * 7 反显\n * 8 不可见\n */\nconst COLOR_CODE = {\n    black: 90,\n    red: 91,\n    green: 92,\n    yellow: 93,\n    blue: 94,\n    purple: 95,\n    cyan: 96,\n    white: 97,\n    // black_bg: 40,\n    // red_bg: 41,\n    // green_bg: 42,\n    // yellow_bg: 43,\n    // blue_bg: 44,\n    // purple_bg: 45,\n    // cyan_bg: 46,\n    // white_bg: 47,\n};\n/**\n * 转换node使用的日志颜色\n * @param option 颜色类型配置\n * @param text 日志起始填充文本内容\n * @param type 日志类型\n * @returns string\n */\nconst baseColor = (option = {}, text, type) => {\n    const { color = 'white', bgColor = 'white' } = option;\n    const backgroundColor = COLOR_CODE[bgColor] || 0;\n    const textColor = COLOR_CODE[color] || 0;\n    if (typeof process === 'object' && process.title === 'node') {\n        return `\\x1b[${backgroundColor + 10};${textColor};1m ${type.toUpperCase()} \\x1b[0m\\x1b[100;97m ${text}\\x1b[0m`;\n    }\n    else {\n        return `\\x1b[${backgroundColor + 10};${textColor};1m ${type.toUpperCase()} \\x1b[0m\\x1b[100;97m ${text}`;\n    }\n};\n/**\n * 日志左侧填充的文字\n */\nconst padText = {\n    info(text = \"beautify-console-log info: -> \", style = { bgColor: 'blue', color: 'white' }) {\n        return [baseColor(style, text, 'info')];\n    },\n    error(text = \"beautify-console-log error: -> \", style = { bgColor: 'red', color: 'white' }) {\n        return [baseColor(style, text, 'error')];\n    },\n    warn(text = \"beautify-console-log warn: -> \", style = { bgColor: 'yellow', color: 'black' }) {\n        return [baseColor(style, text, 'warn')];\n    },\n    log(text = \"beautify-console-log log: -> \", style = { bgColor: 'green', color: 'white' }) {\n        return [baseColor(style, text, 'log')];\n    }\n};\nconst infoKey = 'info';\nconst warnKey = 'warn';\nconst errorKey = 'error';\nconst logKey = 'log';\n/**\n * BeautifyConsole 是console日志工具\n *\n * 目前只有常用的 info、log、error、warn类型\n *\n * 1.使用：\n * ```\n * import BeautifyConsole from \"beautify-console-log\";\n * const log = BeautifyConsole.getInstance();\n * log.log(1, [2, 3], '4');\n * ```\n *\n * 2.设置打开console日志显示：Log.open()\n *\n * 3.设置关闭console日志显示：Log.close()\n *\n * 4.设置开始的填充文本console日志：Log.setPadStartText()\n *\n *\n * 可参考 https://developer.mozilla.org/en-US/docs/Web/API/Console\n */\nclass BeautifyConsole {\n    constructor() {\n        this.infoPadStartText = padText[infoKey]();\n        this.errorPadStartText = padText[errorKey]();\n        this.warnPadStartText = padText[warnKey]();\n        this.logPadStartText = padText[logKey]();\n        this.info = console.info.bind(this, ...this.infoPadStartText);\n        this.error = console.error.bind(this, ...this.errorPadStartText);\n        this.warn = console.warn.bind(this, ...this.warnPadStartText);\n        this.log = console.log.bind(this, ...this.logPadStartText);\n    }\n    static getInstance() {\n        if (!this.instance) {\n            this.instance = new BeautifyConsole();\n        }\n        return this.instance;\n    }\n    /**\n     * 初始化配置项\n     */\n    config(config) {\n        const { type = [infoKey, errorKey, warnKey, logKey], title } = config;\n        if (type.length > 0) {\n            this.setShowLog(false);\n            type.forEach(item => this.setShowLog(true, item));\n        }\n        if (title) {\n            type.forEach(item => this.setPadStartText({\n                logType: item,\n                title\n            }));\n        }\n    }\n    /**\n     * 设置显示/隐藏console日志\n     * @param showLog 是否打印日志 type { boolean }\n     * @param type 需要设置的日志类型日志 type { logType }\n     */\n    setShowLog(showLog, type) {\n        const setShowLogFunction = {\n            info: () => {\n                this.info = showLog ? console.info.bind(this, ...this.infoPadStartText) : (...parasm) => undefined;\n            },\n            error: () => {\n                this.error = showLog ? console.error.bind(this, ...this.errorPadStartText) : (...parasm) => undefined;\n            },\n            warn: () => {\n                this.warn = showLog ? console.warn.bind(this, ...this.warnPadStartText) : (...parasm) => undefined;\n            },\n            log: () => {\n                this.log = showLog ? console.log.bind(this, ...this.logPadStartText) : (...parasm) => undefined;\n            },\n        };\n        // 如果传入了要修改的console日志类型，就只改对应的显示隐藏，否则就更改所有的\n        if (type) {\n            if (setShowLogFunction[type]) {\n                setShowLogFunction[type]();\n            }\n            else {\n                console.error(`type:${type} not supported`);\n            }\n        }\n        else {\n            if (showLog) {\n                this.info = console.info.bind(this, ...this.infoPadStartText);\n                this.error = console.error.bind(this, ...this.errorPadStartText);\n                this.warn = console.warn.bind(this, ...this.warnPadStartText);\n                this.log = console.log.bind(this, ...this.logPadStartText);\n            }\n            else {\n                this.info = (...parasm) => undefined;\n                this.error = (...parasm) => undefined;\n                this.warn = (...parasm) => undefined;\n                this.log = (...parasm) => undefined;\n            }\n        }\n    }\n    /**\n     * 重置console日志\n     *\n     * @param type 需要设置的日志类型日志 type { logType }\n     *\n     * @returns BeautifyConsole\n     */\n    reset() {\n        this.setShowLog(true);\n        return this;\n    }\n    /**\n     * 打开console日志\n     *\n     * @param type 需要设置的日志类型日志 type { logType }\n     *\n     * @returns BeautifyConsole\n     */\n    open(type) {\n        this.setShowLog(true, type);\n        return this;\n    }\n    /**\n     * 关闭console日志\n     *\n     * @param type 需要设置的日志类型日志 type { logType }\n     *\n     * @returns BeautifyConsole\n     */\n    close(type) {\n        this.setShowLog(false, type);\n        return this;\n    }\n    /**\n     * 重置开始的填充文本console日志，默认如info类型的开始填充： `cbeautify-console-log info: -> `\n     * @param type type { consoleType }\n     * @param text type { any }\n     * @returns BeautifyConsole\n     */\n    setPadStartText(config) {\n        try {\n            const setTextFunction = {\n                info: () => {\n                    this.info = console.info.bind(this, ...padText[infoKey](config.title, config.style));\n                },\n                error: () => {\n                    this.error = console.error.bind(this, ...padText[errorKey](config.title, config.style));\n                },\n                warn: () => {\n                    this.warn = console.warn.bind(this, ...padText[warnKey](config.title, config.style));\n                },\n                log: () => {\n                    this.log = console.log.bind(this, ...padText[logKey](config.title, config.style));\n                },\n            };\n            if (setTextFunction[config.logType]) {\n                setTextFunction[config.logType]();\n            }\n            else {\n                console.error(`type:${config.logType} not supported`);\n            }\n        }\n        catch (error) {\n            this.error(error);\n        }\n        return this;\n    }\n}\nexports.BeautifyConsole = BeautifyConsole;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst beautify_console_1 = require(\"./beautify-console\");\nexports.default = beautify_console_1.BeautifyConsole;\n"],"names":["root","factory","exports","module","define","amd","self","Object","defineProperty","value","BeautifyConsole","COLOR_CODE","black","red","green","yellow","blue","purple","cyan","white","baseColor","option","text","type","color","bgColor","backgroundColor","textColor","process","title","toUpperCase","padText","info","style","error","warn","log","infoKey","warnKey","errorKey","logKey","constructor","this","infoPadStartText","errorPadStartText","warnPadStartText","logPadStartText","console","bind","getInstance","instance","config","length","setShowLog","forEach","item","setPadStartText","logType","showLog","setShowLogFunction","parasm","reset","open","close","setTextFunction","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","beautify_console_1"],"sourceRoot":""}